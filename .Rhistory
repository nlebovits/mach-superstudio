arrange(year) # Ensure data is in chronological order
model <- lm(population ~ year, data = geoid_data)
# Predict tot_pop_1940 for the geoid using the model
predicted_1940 <- predict(model, newdata = data.frame(year = 1940))
# Update the 'full' dataset with the predicted value for the specific geoid
# This will replace the existing value for tot_pop_1940 only for the current geoid
full$tot_pop_1940[full$geoid == "3402541010"] <- as.integer(predicted_1940)
geoid_data <- full %>%
st_drop_geometry() %>%
filter(geoid == "3402775890") %>%
select(geoid, starts_with("tot_pop_")) %>%
pivot_longer(cols = -geoid, names_prefix = "tot_pop_", names_to = "year", values_to = "population") %>%
mutate(year = as.integer(str_replace(year, "tot_pop_", ""))) %>%
filter(year %in% years) %>%
arrange(year) # Ensure data is in chronological order
model <- lm(population ~ year, data = geoid_data)
# Predict tot_pop_1940 for the geoid using the model
predicted_1940 <- predict(model, newdata = data.frame(year = 1960))
# Update the 'full' dataset with the predicted value for the specific geoid
# This will replace the existing value for tot_pop_1940 only for the current geoid
full$tot_pop_1940[full$geoid == "3402775890"] <- as.integer(predicted_1940)
geoid_data <- full %>%
st_drop_geometry() %>%
filter(geoid == "3400702230") %>%
select(geoid, starts_with("tot_pop_")) %>%
pivot_longer(cols = -geoid, names_prefix = "tot_pop_", names_to = "year", values_to = "population") %>%
mutate(year = as.integer(str_replace(year, "tot_pop_", ""))) %>%
filter(year %in% years) %>%
arrange(year) # Ensure data is in chronological order
model <- lm(population ~ year, data = geoid_data)
# Predict tot_pop_1940 for the geoid using the model
predicted_1940 <- predict(model, newdata = data.frame(year = 1960))
# Update the 'full' dataset with the predicted value for the specific geoid
# This will replace the existing value for tot_pop_1940 only for the current geoid
full$tot_pop_1940[full$geoid == "3400702230"] <- as.integer(predicted_1940)
geoid_data <- full %>%
st_drop_geometry() %>%
filter(geoid == "3402573020") %>%
select(geoid, starts_with("tot_pop_")) %>%
pivot_longer(cols = -geoid, names_prefix = "tot_pop_", names_to = "year", values_to = "population") %>%
mutate(year = as.integer(str_replace(year, "tot_pop_", ""))) %>%
filter(year %in% years) %>%
arrange(year) # Ensure data is in chronological order
model <- lm(population ~ year, data = geoid_data)
# Predict tot_pop_1940 for the geoid using the model
predicted_1940 <- predict(model, newdata = data.frame(year = 1960))
# Update the 'full' dataset with the predicted value for the specific geoid
# This will replace the existing value for tot_pop_1940 only for the current geoid
full$tot_pop_1940[full$geoid == "3402573020"] <- as.integer(predicted_1940)
geoid_data <- full %>%
st_drop_geometry() %>%
filter(geoid == "3403981650") %>%
select(geoid, starts_with("tot_pop_")) %>%
pivot_longer(cols = -geoid, names_prefix = "tot_pop_", names_to = "year", values_to = "population") %>%
mutate(year = as.integer(str_replace(year, "tot_pop_", ""))) %>%
filter(year %in% years) %>%
arrange(year) # Ensure data is in chronological order
model <- lm(population ~ year, data = geoid_data)
# Predict tot_pop_1940 for the geoid using the model
predicted_1940 <- predict(model, newdata = data.frame(year = 1960))
# Update the 'full' dataset with the predicted value for the specific geoid
# This will replace the existing value for tot_pop_1940 only for the current geoid
full$tot_pop_1940[full$geoid == "3403981650"] <- as.integer(predicted_1940)
geoid_data <- full %>%
st_drop_geometry() %>%
filter(geoid == "3400108680") %>%
select(geoid, starts_with("tot_pop_")) %>%
pivot_longer(cols = -geoid, names_prefix = "tot_pop_", names_to = "year", values_to = "population") %>%
mutate(year = as.integer(str_replace(year, "tot_pop_", ""))) %>%
filter(year %in% years) %>%
arrange(year) # Ensure data is in chronological order
model <- lm(population ~ year, data = geoid_data)
# Predict tot_pop_1940 for the geoid using the model
predicted_1940 <- predict(model, newdata = data.frame(year = 1960))
# Update the 'full' dataset with the predicted value for the specific geoid
# This will replace the existing value for tot_pop_1940 only for the current geoid
full$tot_pop_1940[full$geoid == "3400108680"] <- as.integer(predicted_1940)
## check
tm_shape(full) +
tm_polygons(col = "tot_pop_1940", palette = 'viridis', style = 'jenks') +
tm_layout(legend.outside = TRUE,
frame = FALSE)
long_data <- full %>%
pivot_longer(
cols = starts_with("tot_pop_"),
names_to = "year",
values_to = "tot_pop",
names_prefix = "tot_pop_",
names_pattern = "(\\d+)$"
) %>%
mutate(year = as.numeric(year)) %>%
st_make_valid()
long_data %>%
#filter(pct_pop_change_1950_to_2020 < 0) %>%
#filter(geoid %in% linear_back_imput) %>%
ggplot(aes(x = year, y = tot_pop, group = namelsad)) +
geom_line(aes(color = "darkgrey")) + # Color based on the new color_group column
#geom_smooth(method = "lm", se = FALSE, lty = 'dashed') +
scale_color_identity() + # Use the actual color names stored in color_group
stat_summary(fun = median, geom = "line", aes(group = 1), color = "darkred", size = 1) + # Average line
facet_wrap(~size_class, scales = "free", nrow = 2) +
theme(legend.position = "none") +
theme_minimal()
tm <- tm_shape(long_data) +
tm_polygons(col = "tot_pop", border.alpha = 0, palette = 'viridis', style = "fisher", colorNA = "lightgrey", title = "Total Population") +
tm_facets(along = "year") +
tm_layout(frame = FALSE)
suppressMessages(
tmap_animation(tm, "tot_pop_animation.gif", delay = 50)
)
colSums(is.na(long_data))
long_data %>% filter(is.na(tot_pop))
library(tidyverse)
library(tigris)
library(sf)
library(janitor)
library(tidycensus)
library(tmap)
library(FedData)
library(terra)
library(exactextractr)
library(gtools)
options(tigris_use_cache = TRUE, scipen = 999)
### import muni pop data------------------------------------
nj_muni_pop <- read_csv('nj_muni_pop_1940_2020.csv') %>%
clean_names()
nj_muni_pop$municipality[nj_muni_pop$municipality == "West Paterson borough"] <- "Woodland Park borough"
nj_muni_pop$municipality[nj_muni_pop$municipality == "Ho-ho-kus borough"] <- "Ho-Ho-Kus borough"
nj_muni_pop$municipality[nj_muni_pop$municipality == "South Belmar borough"] <- "Lake Como borough"
nj_muni_pop$municipality[nj_muni_pop$municipality == "Princeton township"] <- "Princeton"
nj_muni_pop$municipality[nj_muni_pop$municipality == "Washington township"] <- "Robbinsville township"
nj_muni_pop$municipality[nj_muni_pop$municipality == "Dover township"] <- "Toms River township"
nj_muni_pop$municipality[nj_muni_pop$municipality == "Verona Borough township"] <- "Verona township"
### import census boundaries + data------------------------------------
# boundaries
nj_county_subdivisions <- county_subdivisions("NJ") %>% clean_names() %>% select(geoid, namelsad)
combined <- full_join(nj_county_subdivisions,
nj_muni_pop,
by = c("namelsad" = "municipality"))
# census data
vacancy20 <- get_acs(geography = "county subdivision",
state = "NJ",
variables = c("B25002_001", # total units
"B25002_003"), # vacant units
year = 2020,
output = 'wide') %>%
rename(tot = B25002_001E,
vac = B25002_003E) %>%
mutate(pct_res_vac = vac / tot * 100) %>%
clean_names() %>%
select(geoid, pct_res_vac)
pop20 <- get_decennial(geography = "county subdivision",
state = "NJ",
variables = "P1_001N",
year = 2020,
sumfile = "dhc",
geometry = TRUE)%>%
rename(tot_pop_2020 = value)
pop10 <- get_decennial(geography = "county subdivision",
state = "NJ",
variables = "P001001",
year = 2010,
sumfile = "sf1") %>%
rename(tot_pop_2010 = value) %>%
select(GEOID, tot_pop_2010)
pop00 <- get_decennial(geography = "county subdivision",
state = "NJ",
variables = "P001001",
year = 2000,
sumfile = "sf1") %>%
rename(tot_pop_2000 = value) %>%
select(GEOID, tot_pop_2000)
pop00to20 <- pop20 %>%
left_join(pop10, by = "GEOID") %>%
left_join(pop00, by = "GEOID") %>%
mutate(pct_pop_change = (tot_pop_2020 - tot_pop_2000) / tot_pop_2000)
### combine data---------------------------------
full <- combined %>%
full_join(st_drop_geometry(pop00to20), by = c("geoid" = "GEOID")) %>%
select(geoid, namelsad, NAME, x1940, x1950, x1960, x1970, x1980, x1990, tot_pop_2000, tot_pop_2010, tot_pop_2020) %>%
rename(tot_pop_1940 = x1940, tot_pop_1950 = x1950, tot_pop_1960 = x1960, tot_pop_1970 = x1970, tot_pop_1980 = x1980, tot_pop_1990 = x1990) %>%
st_make_valid() %>%
mutate(size_class = case_when(
tot_pop_2020 > 50000 ~ "Large",
tot_pop_2020 <= 50000 & tot_pop_2020 > 10000 ~ "Medium",
tot_pop_2020 <= 10000 & tot_pop_2020 > 5000 ~ "Small",
TRUE ~ "Very Small"
)) %>%
filter(!st_is_empty(geometry)) %>%
# mutate(pct_pop_change_1950_to_2020 = (tot_pop_2020 - tot_pop_1950) / tot_pop_1950,
#        pct_pop_change_1950_to_1990 = (tot_pop_1990 - tot_pop_1950) / tot_pop_1950,
#        pct_pop_change_1980_to_2020 = (tot_pop_2020 - tot_pop_1980) / tot_pop_1980,
#        pct_pop_change_1990_to_2020 = (tot_pop_2020 - tot_pop_1990) / tot_pop_1990) %>%
full_join(vacancy20, by = "geoid") %>%
distinct(geoid, .keep_all = TRUE) %>%
filter(namelsad != "County subdivisions not defined")
# sourced from here: https://westjersey.org/popcap_04.htm
cape_may_dat <- read.table(header=TRUE, text="
MUNICIPALITY,1910,1915,1920,1930,1940,1950,1960,1970,1980,1990,2000
'Avalon borough',230,323,197,343,313,428,695,1283,2162,1809,2143
'Cape May city',2471,2513,2999,2637,2583,3607,4477,4392,4853,4668,4034
'Cape May Point borough',162,170,121,104,126,198,263,204,255,248,241
'Dennis township',1751,1804,1639,1615,1877,1981,2327,2635,3989,5574,6492
'Holly Beach',1901,,,,,,,,,
'Lower township',1188,1271,1096,1444,1693,2737,6332,10154,17105,20820,22945
'Middle township',2974,3383,2760,3430,3889,4599,6718,8725,11373,14771,16405
'North Cape May*',,,,,,,,,,
'North Wildwood city',833,1088,807,2049,1921,3158,3598,3914,4714,5017,4935
'Ocean City city',1950,3721,2512,5525,4672,6040,7618,10575,13949,15512,15378
'Sea Isle City city',551,955,564,850,773,993,1393,1712,2644,2692,2835
'South Cape May*',7,19,10,,,,,,
'Stone Harbor borough',,459,159,363,383,670,834,1089,1187,1025,1128
'Upper township',1483,1589,1272,1657,1675,1922,2539,3413,6713,10681,12115
'West Cape May borough',844,1068,967,1048,934,897,1030,1005,1091,1026,1095
'West Wildwood borough',,,178,146,237,207,235,360,453,448
'Wildwood city',898,3858,2790,5330,5150,5475,4690,4110,4913,4484,5436
'Wildwood Crest borough',103,317,161,738,661,1772,3011,3483,4149,3631,3980
'Woodbine borough',2399,1869,1406,2164,2111,2417,2823,2625,2809,2678,2716
", sep=",", quote="'", fill=TRUE) %>% clean_names()
cape_may_dat <- left_join(full %>%
filter(is.na(tot_pop_1990)), cape_may_dat, by = c("namelsad" = "municipality")) %>%
select(-c(tot_pop_1940,
tot_pop_1950,
tot_pop_1960,
tot_pop_1970,
tot_pop_1980,
tot_pop_1990,
x1910,
x1915,
x1920,
x1930,
x2000)) %>%
rename(tot_pop_1940 = x1940,
tot_pop_1950 = x1950,
tot_pop_1960 = x1960,
tot_pop_1970 = x1970,
tot_pop_1980 = x1980,
tot_pop_1990 = x1990) %>%
filter(!is.na(tot_pop_1990))
column_order <- colnames(full)
cape_may_dat <- cape_may_dat[, column_order]
full <- rbind(full, cape_may_dat)
full <- full %>%
filter(!(grepl("Cape May County", NAME) & is.na(tot_pop_1990)))
### some random imputations-------------------------------------------------
full$tot_pop_2000[full$geoid == 3401309250] <- as.integer((full$tot_pop_2010[full$geoid == 3401309250] + full$tot_pop_1990[full$geoid == 3401309250]) / 2)
# data manually from https://www.nj.gov/labor/labormarketinformation/assets/PDFs/census/2kpub/njsdcp3.pdf#page=27
# Lake Como borough
full$tot_pop_2000[full$namelsad == "Lake Como borough"] <- 1806
# Jersey City city
full$tot_pop_2000[full$namelsad == "Jersey City city"] <- 240055
# Woodland Park borough
full$tot_pop_2000[full$namelsad == "Woodland Park borough"] <- 10987
# Robbinsville township
full$tot_pop_2000[full$namelsad == "Robbinsville township"] <- 10275
# Toms River township
full$tot_pop_2000[full$namelsad == "Toms River township"] <- 89706
# watchung borough
full$tot_pop_1940[full$namelsad == "Watchung borough"] <- 1158
full$tot_pop_1950[full$namelsad == "Watchung borough"] <- 1818
full$tot_pop_1960[full$namelsad == "Watchung borough"] <- 3312
full$tot_pop_1970[full$namelsad == "Watchung borough"] <- 4750
full$tot_pop_1980[full$namelsad == "Watchung borough"] <- 5290
full$tot_pop_1990[full$namelsad == "Watchung borough"] <- 5110
# Washington township, Gloucester County, New Jersey
full$tot_pop_1940[full$NAME == "Washington township, Gloucester County, New Jersey"] <- 2048
full$tot_pop_1950[full$NAME == "Washington township, Gloucester County, New Jersey"] <- 2496
full$tot_pop_1960[full$NAME == "Washington township, Gloucester County, New Jersey"] <- 4923
full$tot_pop_1970[full$NAME == "Washington township, Gloucester County, New Jersey"] <- 12741
full$tot_pop_1980[full$NAME == "Washington township, Gloucester County, New Jersey"] <- 27878
full$tot_pop_1990[full$NAME == "Washington township, Gloucester County, New Jersey"] <- 41960
# Washington township, Morris County, New Jersey
full$tot_pop_1940[full$NAME == "Washington township, Morris County, New Jersey"] <- 1870
full$tot_pop_1950[full$NAME == "Washington township, Morris County, New Jersey"] <- 2147
full$tot_pop_1960[full$NAME == "Washington township, Morris County, New Jersey"] <- 3330
full$tot_pop_1970[full$NAME == "Washington township, Morris County, New Jersey"] <- 6962
full$tot_pop_1980[full$NAME == "Washington township, Morris County, New Jersey"] <- 11402
full$tot_pop_1990[full$NAME == "Washington township, Morris County, New Jersey"] <- 15592
# Washington township, Bergen County, New Jersey
full$tot_pop_1940[full$NAME == "Washington township, Bergen County, New Jersey"] <- 491
full$tot_pop_1950[full$NAME == "Washington township, Bergen County, New Jersey"] <- 1208
full$tot_pop_1960[full$NAME == "Washington township, Bergen County, New Jersey"] <- 6654
full$tot_pop_1970[full$NAME == "Washington township, Bergen County, New Jersey"] <- 10577
full$tot_pop_1980[full$NAME == "Washington township, Bergen County, New Jersey"] <- 9550
full$tot_pop_1990[full$NAME == "Washington township, Bergen County, New Jersey"] <- 9245
# Washington township, Burlington County, New Jersey
full$tot_pop_1940[full$NAME == "Washington township, Burlington County, New Jersey"] <- 518
full$tot_pop_1950[full$NAME == "Washington township, Burlington County, New Jersey"] <- 566
full$tot_pop_1960[full$NAME == "Washington township, Burlington County, New Jersey"] <- 541
full$tot_pop_1970[full$NAME == "Washington township, Burlington County, New Jersey"] <- 673
full$tot_pop_1980[full$NAME == "Washington township, Burlington County, New Jersey"] <- 808
full$tot_pop_1990[full$NAME == "Washington township, Burlington County, New Jersey"] <- 805
# Washington township, Warren County, New Jersey
full$tot_pop_1940[full$NAME == "Washington township, Warren County, New Jersey"] <- 1320
full$tot_pop_1950[full$NAME == "Washington township, Warren County, New Jersey"] <- 1765
full$tot_pop_1960[full$NAME == "Washington township, Warren County, New Jersey"] <- 3055
full$tot_pop_1970[full$NAME == "Washington township, Warren County, New Jersey"] <- 3585
full$tot_pop_1980[full$NAME == "Washington township, Warren County, New Jersey"] <- 4243
full$tot_pop_1990[full$NAME == "Washington township, Warren County, New Jersey"] <- 5367
### impute 1950 pop values where appropriate----------------------------------------------
# Define the years we'll use for the model
years <- c(1960, 1970, 1980, 1990, 2000, 2010, 2020)
geoid_data <- full %>%
st_drop_geometry() %>%
filter(geoid == "3402541010") %>%
select(geoid, starts_with("tot_pop_")) %>%
pivot_longer(cols = -geoid, names_prefix = "tot_pop_", names_to = "year", values_to = "population") %>%
mutate(year = as.integer(str_replace(year, "tot_pop_", ""))) %>%
filter(year %in% years) %>%
arrange(year) # Ensure data is in chronological order
model <- lm(population ~ year, data = geoid_data)
# Predict tot_pop_1950 for the geoid using the model
predicted_1950 <- predict(model, newdata = data.frame(year = 1950))
# Update the 'full' dataset with the predicted value for the specific geoid
# This will replace the existing value for tot_pop_1950 only for the current geoid
full$tot_pop_1950[full$geoid == "3402541010"] <- as.integer(predicted_1950)
geoid_data <- full %>%
st_drop_geometry() %>%
filter(geoid == "3402775890") %>%
select(geoid, starts_with("tot_pop_")) %>%
pivot_longer(cols = -geoid, names_prefix = "tot_pop_", names_to = "year", values_to = "population") %>%
mutate(year = as.integer(str_replace(year, "tot_pop_", ""))) %>%
filter(year %in% years) %>%
arrange(year) # Ensure data is in chronological order
model <- lm(population ~ year, data = geoid_data)
# Predict tot_pop_1950 for the geoid using the model
predicted_1950 <- predict(model, newdata = data.frame(year = 1950))
# Update the 'full' dataset with the predicted value for the specific geoid
# This will replace the existing value for tot_pop_1950 only for the current geoid
full$tot_pop_1950[full$geoid == "3402775890"] <- as.integer(predicted_1950)
### now 1960--------------------------------------------------------------------------------------
# Define the years we'll use for the model
years <- c(1950, 1960, 1970, 1980, 1990, 2000, 2010, 2020)
geoid_data <- full %>%
st_drop_geometry() %>%
filter(geoid == "3402541010") %>%
select(geoid, starts_with("tot_pop_")) %>%
pivot_longer(cols = -geoid, names_prefix = "tot_pop_", names_to = "year", values_to = "population") %>%
mutate(year = as.integer(str_replace(year, "tot_pop_", ""))) %>%
filter(year %in% years) %>%
arrange(year) # Ensure data is in chronological order
model <- lm(population ~ year, data = geoid_data)
# Predict tot_pop_1940 for the geoid using the model
predicted_1940 <- predict(model, newdata = data.frame(year = 1940))
# Update the 'full' dataset with the predicted value for the specific geoid
# This will replace the existing value for tot_pop_1940 only for the current geoid
full$tot_pop_1940[full$geoid == "3402541010"] <- as.integer(predicted_1940)
geoid_data <- full %>%
st_drop_geometry() %>%
filter(geoid == "3402775890") %>%
select(geoid, starts_with("tot_pop_")) %>%
pivot_longer(cols = -geoid, names_prefix = "tot_pop_", names_to = "year", values_to = "population") %>%
mutate(year = as.integer(str_replace(year, "tot_pop_", ""))) %>%
filter(year %in% years) %>%
arrange(year) # Ensure data is in chronological order
model <- lm(population ~ year, data = geoid_data)
# Predict tot_pop_1940 for the geoid using the model
predicted_1940 <- predict(model, newdata = data.frame(year = 1960))
# Update the 'full' dataset with the predicted value for the specific geoid
# This will replace the existing value for tot_pop_1940 only for the current geoid
full$tot_pop_1940[full$geoid == "3402775890"] <- as.integer(predicted_1940)
geoid_data <- full %>%
st_drop_geometry() %>%
filter(geoid == "3400702230") %>%
select(geoid, starts_with("tot_pop_")) %>%
pivot_longer(cols = -geoid, names_prefix = "tot_pop_", names_to = "year", values_to = "population") %>%
mutate(year = as.integer(str_replace(year, "tot_pop_", ""))) %>%
filter(year %in% years) %>%
arrange(year) # Ensure data is in chronological order
model <- lm(population ~ year, data = geoid_data)
# Predict tot_pop_1940 for the geoid using the model
predicted_1940 <- predict(model, newdata = data.frame(year = 1960))
# Update the 'full' dataset with the predicted value for the specific geoid
# This will replace the existing value for tot_pop_1940 only for the current geoid
full$tot_pop_1940[full$geoid == "3400702230"] <- as.integer(predicted_1940)
geoid_data <- full %>%
st_drop_geometry() %>%
filter(geoid == "3402573020") %>%
select(geoid, starts_with("tot_pop_")) %>%
pivot_longer(cols = -geoid, names_prefix = "tot_pop_", names_to = "year", values_to = "population") %>%
mutate(year = as.integer(str_replace(year, "tot_pop_", ""))) %>%
filter(year %in% years) %>%
arrange(year) # Ensure data is in chronological order
model <- lm(population ~ year, data = geoid_data)
# Predict tot_pop_1940 for the geoid using the model
predicted_1940 <- predict(model, newdata = data.frame(year = 1960))
# Update the 'full' dataset with the predicted value for the specific geoid
# This will replace the existing value for tot_pop_1940 only for the current geoid
full$tot_pop_1940[full$geoid == "3402573020"] <- as.integer(predicted_1940)
geoid_data <- full %>%
st_drop_geometry() %>%
filter(geoid == "3403981650") %>%
select(geoid, starts_with("tot_pop_")) %>%
pivot_longer(cols = -geoid, names_prefix = "tot_pop_", names_to = "year", values_to = "population") %>%
mutate(year = as.integer(str_replace(year, "tot_pop_", ""))) %>%
filter(year %in% years) %>%
arrange(year) # Ensure data is in chronological order
model <- lm(population ~ year, data = geoid_data)
# Predict tot_pop_1940 for the geoid using the model
predicted_1940 <- predict(model, newdata = data.frame(year = 1960))
# Update the 'full' dataset with the predicted value for the specific geoid
# This will replace the existing value for tot_pop_1940 only for the current geoid
full$tot_pop_1940[full$geoid == "3403981650"] <- as.integer(predicted_1940)
geoid_data <- full %>%
st_drop_geometry() %>%
filter(geoid == "3400108680") %>%
select(geoid, starts_with("tot_pop_")) %>%
pivot_longer(cols = -geoid, names_prefix = "tot_pop_", names_to = "year", values_to = "population") %>%
mutate(year = as.integer(str_replace(year, "tot_pop_", ""))) %>%
filter(year %in% years) %>%
arrange(year) # Ensure data is in chronological order
model <- lm(population ~ year, data = geoid_data)
# Predict tot_pop_1940 for the geoid using the model
predicted_1940 <- predict(model, newdata = data.frame(year = 1960))
# Update the 'full' dataset with the predicted value for the specific geoid
# This will replace the existing value for tot_pop_1940 only for the current geoid
full$tot_pop_1940[full$geoid == "3400108680"] <- as.integer(predicted_1940)
## check
tm_shape(full) +
tm_polygons(col = "tot_pop_1940", palette = 'viridis', style = 'jenks') +
tm_layout(legend.outside = TRUE,
frame = FALSE)
long_data <- full %>%
pivot_longer(
cols = starts_with("tot_pop_"),
names_to = "year",
values_to = "tot_pop",
names_prefix = "tot_pop_",
names_pattern = "(\\d+)$"
) %>%
mutate(year = as.numeric(year)) %>%
st_make_valid()
long_data %>%
#filter(pct_pop_change_1950_to_2020 < 0) %>%
#filter(geoid %in% linear_back_imput) %>%
ggplot(aes(x = year, y = tot_pop, group = namelsad)) +
geom_line(aes(color = "darkgrey")) + # Color based on the new color_group column
#geom_smooth(method = "lm", se = FALSE, lty = 'dashed') +
scale_color_identity() + # Use the actual color names stored in color_group
stat_summary(fun = median, geom = "line", aes(group = 1), color = "darkred", size = 1) + # Average line
facet_wrap(~size_class, scales = "free", nrow = 2) +
theme(legend.position = "none") +
theme_minimal()
tm <- tm_shape(long_data) +
tm_polygons(col = "tot_pop", border.alpha = 0, palette = 'viridis', style = "fisher", colorNA = "lightgrey", title = "Total Population") +
tm_facets(along = "year") +
tm_layout(frame = FALSE)
suppressMessages(
tmap_animation(tm, "tot_pop_animation.gif", delay = 50)
)
library(tidyverse)
library(tigris)
library(sf)
library(janitor)
library(tidycensus)
library(tmap)
library(FedData)
library(terra)
library(exactextractr)
library(gtools)
options(tigris_use_cache = TRUE, scipen = 999)
### import muni pop data------------------------------------
nj_muni_pop <- read_csv('../data/nj_muni_pop_1940_2020.csv') %>%
clean_names()
library(tidyverse)
library(tigris)
library(sf)
library(janitor)
library(tidycensus)
library(tmap)
library(FedData)
library(terra)
library(exactextractr)
library(gtools)
options(tigris_use_cache = TRUE, scipen = 999)
### import muni pop data------------------------------------
nj_muni_pop <- read_csv('../data/nj_muni_pop_1940_2020.csv') %>%
clean_names()
library(tidyverse)
library(tigris)
library(sf)
library(janitor)
library(tidycensus)
library(tmap)
library(FedData)
library(terra)
library(exactextractr)
library(gtools)
options(tigris_use_cache = TRUE, scipen = 999)
### import muni pop data------------------------------------
nj_muni_pop <- read_csv('../data/nj_muni_pop_1940_2020.csv') %>%
clean_names()
here()
here()
library(here)
here()
library(tidyverse)
library(tigris)
library(sf)
library(janitor)
library(tidycensus)
library(tmap)
library(FedData)
library(terra)
library(exactextractr)
library(gtools)
library(here)
options(tigris_use_cache = TRUE, scipen = 999)
here()
### import muni pop data------------------------------------
nj_muni_pop <- read_csv('../data/nj_muni_pop_1940_2020.csv') %>%
clean_names()
